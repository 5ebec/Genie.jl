var documenterSearchIndex = {"docs":
[{"location":"sessions/#","page":"-","title":"-","text":"CurrentModule = Sessions","category":"page"},{"location":"sessions/#","page":"-","title":"-","text":"","category":"page"},{"location":"sessions/#","page":"-","title":"-","text":"Session\nid\nstart\nset!\nget\nget!!\nunset!\nisset\nsession","category":"page"},{"location":"sessions/#Genie.Sessions.id","page":"-","title":"Genie.Sessions.id","text":"id() :: String\n\nGenerates a new session id.\n\n\n\n\n\nid(payload::Union{HTTP.Request,HTTP.Response}) :: String\n\nAttempts to retrieve the session id from the provided payload object. If that is not available, a new session id is created.\n\n\n\n\n\nid(req::HTTP.Request, res::HTTP.Response) :: String\n\nAttempts to retrieve the session id from the provided request and response objects. If that is not available, a new session id is created.\n\n\n\n\n\n","category":"function"},{"location":"sessions/#Genie.Sessions.start","page":"-","title":"Genie.Sessions.start","text":"start(session_id::String, req::HTTP.Request, res::HTTP.Response; options = Dict{String,String}()) :: Session\n\nInitiates a new HTTP session with the provided session_id.\n\nArguments\n\nsession_id::String: the id of the session object\nreq::HTTP.Request: the request object\nres::HTTP.Response: the response object\noptions::Dict{String,String}: extra options for setting the session cookie, such as Path and HttpOnly\n\n\n\n\n\nstart(req::HTTP.Request, res::HTTP.Response; options::Dict{String,String} = Dict{String,String}()) :: Session\n\nInitiates a new default session object, generating a new session id.\n\nArguments\n\nreq::HTTP.Request: the request object\nres::HTTP.Response: the response object\noptions::Dict{String,String}: extra options for setting the session cookie, such as Path and HttpOnly\n\n\n\n\n\n","category":"function"},{"location":"sessions/#Genie.Sessions.set!","page":"-","title":"Genie.Sessions.set!","text":"set!(s::Session, key::Symbol, value::Any) :: Session\n\nStores value as key on the Session object s.\n\n\n\n\n\n","category":"function"},{"location":"sessions/#Genie.Sessions.get","page":"-","title":"Genie.Sessions.get","text":"get(s::Session, key::Symbol) :: Nullable\n\nReturns the value stored on the Session object s as key, wrapped in a Nullable.\n\n\n\n\n\nget(s::Session, key::Symbol, default::T) :: T where T\n\nAttempts to retrive the value stored on the Session object s as key. If the value is not set, it returns the default.\n\n\n\n\n\n","category":"function"},{"location":"sessions/#Genie.Sessions.get!!","page":"-","title":"Genie.Sessions.get!!","text":"get!!(s::Session, key::Symbol)\n\nAttempts to read the value stored on the Session s as key - throws an exception if the key is not set.\n\n\n\n\n\n","category":"function"},{"location":"sessions/#Genie.Sessions.unset!","page":"-","title":"Genie.Sessions.unset!","text":"unset!(s::Session, key::Symbol) :: Session\n\nRemoves the value stored on the Session s as key.\n\n\n\n\n\n","category":"function"},{"location":"sessions/#Genie.Sessions.isset","page":"-","title":"Genie.Sessions.isset","text":"isset(s::Session, key::Symbol) :: Bool\n\nChecks wheter or not key exists on the Session s.\n\n\n\n\n\n","category":"function"},{"location":"sessions/#Genie.Sessions.session","page":"-","title":"Genie.Sessions.session","text":"session(params::Dict{Symbol,Any}) :: Sessions.Session\n\nReturns the Session object associated with the current HTTP request.\n\n\n\n\n\n","category":"function"},{"location":"renderer/#","page":"-","title":"-","text":"CurrentModule = Renderer","category":"page"},{"location":"renderer/#","page":"-","title":"-","text":"","category":"page"},{"location":"renderer/#","page":"-","title":"-","text":"WebRenderable\ntohtml\nhtml\ntojson\njson\nredirect\nhasrequested\nrespond","category":"page"},{"location":"renderer/#Genie.Renderer.tohtml","page":"-","title":"Genie.Renderer.tohtml","text":"\n\n\n\n","category":"function"},{"location":"renderer/#Genie.Renderer.html","page":"-","title":"Genie.Renderer.html","text":"\n\n\n\n","category":"function"},{"location":"renderer/#Genie.Renderer.tojson","page":"-","title":"Genie.Renderer.tojson","text":"Invokes the JSON renderer of the underlying configured templating library.\n\n\n\n\n\n","category":"function"},{"location":"renderer/#Genie.Renderer.json","page":"-","title":"Genie.Renderer.json","text":"\n\n\n\n","category":"function"},{"location":"renderer/#Genie.Renderer.redirect","page":"-","title":"Genie.Renderer.redirect","text":"Sets redirect headers and prepares the Response.\n\n\n\n\n\n","category":"function"},{"location":"renderer/#Genie.Renderer.hasrequested","page":"-","title":"Genie.Renderer.hasrequested","text":"hasrequested(content_type::Symbol) :: Bool\n\nChecks wheter or not the requested content type matches content_type.\n\n\n\n\n\n","category":"function"},{"location":"renderer/#Genie.Renderer.respond","page":"-","title":"Genie.Renderer.respond","text":"Constructs a Response corresponding to the content-type sof the request.\n\n\n\n\n\n","category":"function"},{"location":"tester/#","page":"-","title":"-","text":"CurrentModule = Tester","category":"page"},{"location":"tester/#","page":"-","title":"-","text":"","category":"page"},{"location":"tester/#","page":"-","title":"-","text":"bootstrap_tests\nreset_db\nrun_all_tests\nset_test_env","category":"page"},{"location":"tester/#Genie.Tester.bootstrap_tests","page":"-","title":"Genie.Tester.bootstrap_tests","text":"bootstrap_tests(cmd_args::String, config::Settings) :: Nothing\n\nSets up testing environment, includes test files, etc.\n\n\n\n\n\n","category":"function"},{"location":"tester/#Genie.Tester.reset_db","page":"-","title":"Genie.Tester.reset_db","text":"reset_db() :: Nothing\n\nPrepares the test env DB running all migrations up.\n\n\n\n\n\n","category":"function"},{"location":"tester/#Genie.Tester.run_all_tests","page":"-","title":"Genie.Tester.run_all_tests","text":"run_all_tests(cmd_args::String, config::Settings) :: Nothing\n\nRuns all existing tests.\n\n\n\n\n\n","category":"function"},{"location":"tester/#Genie.Tester.set_test_env","page":"-","title":"Genie.Tester.set_test_env","text":"set_test_env() :: Nothing\n\nSwitches Genie to the test env for the duration of the current execution.\n\n\n\n\n\n","category":"function"},{"location":"cache/#","page":"-","title":"-","text":"CurrentModule = Cache","category":"page"},{"location":"cache/#","page":"-","title":"-","text":"","category":"page"},{"location":"cache/#","page":"-","title":"-","text":"withcache\npurge\npurgeall","category":"page"},{"location":"cache/#Genie.Cache.withcache","page":"-","title":"Genie.Cache.withcache","text":"withcache(f::Function, key::Union{String,Symbol}, expiration::Int = CACHE_DURATION; dir = \"\", condition::Bool = true)\n\nExecutes the function f and stores the result into the cache for the duration (in seconds) of expiration. Next time the function is invoked, if the cache has not expired, the cached result is returned skipping the function execution. The optional dir param is used to designate the folder where the cache will be stored (within the configured cache folder). If condition is false caching will be skipped.\n\n\n\n\n\n","category":"function"},{"location":"cache/#Genie.Cache.purge","page":"-","title":"Genie.Cache.purge","text":"purge(key::Union{String,Symbol}; dir::String = \"\") :: Nothing\n\nRemoves the cache data stored under the key key.\n\n\n\n\n\n","category":"function"},{"location":"cache/#Genie.Cache.purgeall","page":"-","title":"Genie.Cache.purgeall","text":"purgeall(; dir::String = \"\") :: Nothing\n\nRemoves all cached data.\n\n\n\n\n\n","category":"function"},{"location":"app/#","page":"-","title":"-","text":"CurrentModule = App","category":"page"},{"location":"app/#","page":"-","title":"-","text":"","category":"page"},{"location":"app/#","page":"-","title":"-","text":"bootstrap","category":"page"},{"location":"app/#Genie.App.bootstrap","page":"-","title":"Genie.App.bootstrap","text":"bootstrap(context::Module = @__MODULE__) :: Nothing\n\nKickstarts the loading of a Genie app by loading the environment settings.\n\n\n\n\n\n","category":"function"},{"location":"webchannels/#","page":"-","title":"-","text":"CurrentModule = Util","category":"page"},{"location":"webchannels/#","page":"-","title":"-","text":"","category":"page"},{"location":"webchannels/#","page":"-","title":"-","text":"ChannelClient\nChannelMessage\nclients\nsubscriptions\nwebsockets\nchannels\nconnected_clients\ndisconnected_clients\nsubscribe\nunsubscribe\nunsubscribe_client\nunsubscribe_disconnected_clients\npush_subscription\npop_subscription\nbroadcast\nmessage","category":"page"},{"location":"webchannels/#Base.Broadcast.broadcast","page":"-","title":"Base.Broadcast.broadcast","text":"broadcast(f, As...)\n\nBroadcast the function f over the arrays, tuples, collections, Refs and/or scalars As.\n\nBroadcasting applies the function f over the elements of the container arguments and the scalars themselves in As. Singleton and missing dimensions are expanded to match the extents of the other arguments by virtually repeating the value. By default, only a limited number of types are considered scalars, including Numbers, Strings, Symbols, Types, Functions and some common singletons like missing and nothing. All other arguments are iterated over or indexed into elementwise.\n\nThe resulting container type is established by the following rules:\n\nIf all the arguments are scalars or zero-dimensional arrays, it returns an unwrapped scalar.\nIf at least one argument is a tuple and all others are scalars or zero-dimensional arrays, it returns a tuple.\nAll other combinations of arguments default to returning an Array, but custom container types can define their own implementation and promotion-like rules to customize the result when they appear as arguments.\n\nA special syntax exists for broadcasting: f.(args...) is equivalent to broadcast(f, args...), and nested f.(g.(args...)) calls are fused into a single broadcast loop.\n\nExamples\n\njulia> A = [1, 2, 3, 4, 5]\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\njulia> B = [1 2; 3 4; 5 6; 7 8; 9 10]\n5×2 Array{Int64,2}:\n 1   2\n 3   4\n 5   6\n 7   8\n 9  10\n\njulia> broadcast(+, A, B)\n5×2 Array{Int64,2}:\n  2   3\n  5   6\n  8   9\n 11  12\n 14  15\n\njulia> parse.(Int, [\"1\", \"2\"])\n2-element Array{Int64,1}:\n 1\n 2\n\njulia> abs.((1, -2))\n(1, 2)\n\njulia> broadcast(+, 1.0, (0, -2.0))\n(1.0, -1.0)\n\njulia> (+).([[0,2], [1,3]], Ref{Vector{Int}}([1,-1]))\n2-element Array{Array{Int64,1},1}:\n [1, 1]\n [2, 2]\n\njulia> string.((\"one\",\"two\",\"three\",\"four\"), \": \", 1:4)\n4-element Array{String,1}:\n \"one: 1\"\n \"two: 2\"\n \"three: 3\"\n \"four: 4\"\n\n\n\n\n\n\n","category":"function"},{"location":"genie/#","page":"-","title":"-","text":"CurrentModule = Genie","category":"page"},{"location":"genie/#","page":"-","title":"-","text":"","category":"page"},{"location":"genie/#","page":"-","title":"-","text":"serve\nnewapp\nloadapp\nstartup\nnewmodel\nnewcontroller\nnewresource\nnewmigration\nnewtablemigration\nnewtask","category":"page"},{"location":"genie/#Genie.serve","page":"-","title":"Genie.serve","text":"serve(path::String = DOC_ROOT_PATH, params...; kwparams...)\n\nServes a folder of static files located at path. Allows Genie to be used as a static files web server. The params and kwparams arguments are forwarded to Genie.startup().\n\nArguments\n\npath::String: the folder of static files to be served by the server\nparams: additional arguments which are passed to Genie.startup to control the web server\nkwparams: additionak keyword arguments which are passed to Genie.startup to control the web server\n\nExamples\n\njulia> Genie.serve(\"public\", 8888, async = false, verbose = true)\n[ Info: Ready!\n2019-08-06 16:39:20:DEBUG:Main: Web Server starting at http://127.0.0.1:8888\n[ Info: Listening on: 127.0.0.1:8888\n[ Info: Accept (1):  🔗    0↑     0↓    1s 127.0.0.1:8888:8888 ≣16\n\n\n\n\n\n","category":"function"},{"location":"genie/#Genie.newapp","page":"-","title":"Genie.newapp","text":"newapp(path::String = \".\"; autostart::Bool = true, fullstack::Bool = false, dbsupport::Bool = false, mvcsupport::Bool = false) :: Nothing\n\nScaffolds a new Genie app, setting up the file structure indicated by the various arguments.\n\nArguments\n\npath::String: the name of the app and the path where to bootstrap it\nautostart::Bool: automatically start the app once the file structure is created\nfullstack::Bool: the type of app to be bootstrapped. The fullstack app includes MVC structure, DB connection code, and asset pipeline files.\ndbsupport::Bool: bootstrap the files needed for DB connection setup via the SearchLight ORM\nmvcsupport::Bool: adds the files used for Flax view templates rendering and working with resources\n\nExamples\n\njulia> Genie.newapp(\"MyGenieApp\")\n2019-08-06 16:54:15:INFO:Main: Done! New app created at MyGenieApp\n2019-08-06 16:54:15:DEBUG:Main: Changing active directory to MyGenieApp\n2019-08-06 16:54:15:DEBUG:Main: Installing app dependencies\n Resolving package versions...\n  Updating `~/Dropbox/Projects/GenieTests/MyGenieApp/Project.toml`\n  [c43c736e] + Genie v0.10.1\n  Updating `~/Dropbox/Projects/GenieTests/MyGenieApp/Manifest.toml`\n\n2019-08-06 16:54:27:INFO:Main: Starting your brand new Genie app - hang tight!\n _____         _\n|   __|___ ___|_|___\n|  |  | -_|   | | -_|\n|_____|___|_|_|_|___|\n\n┌ Info:\n│ Starting Genie in >> DEV << mode\n└\n[ Info: Logging to file at MyGenieApp/log/dev.log\n[ Info: Ready!\n2019-08-06 16:54:32:DEBUG:Main: Web Server starting at http://127.0.0.1:8000\n2019-08-06 16:54:32:DEBUG:Main: Web Server running at http://127.0.0.1:8000\n\n\n\n\n\n","category":"function"},{"location":"genie/#Genie.loadapp","page":"-","title":"Genie.loadapp","text":"loadapp(path::String = \".\"; autostart::Bool = false) :: Nothing\n\nLoads an existing Genie app from the file system, within the current Julia REPL session.\n\nArguments\n\npath::String: the path to the Genie app on the file system.\nautostart::Bool: automatically start the app upon loading it.\n\nExamples\n\nshell> tree -L 1\n.\n├── Manifest.toml\n├── Project.toml\n├── bin\n├── bootstrap.jl\n├── config\n├── env.jl\n├── genie.jl\n├── log\n├── public\n├── routes.jl\n└── src\n\n5 directories, 6 files\n\njulia> using Genie\n\njulia> Genie.loadapp(\".\")\n _____         _\n|   __|___ ___|_|___\n|  |  | -_|   | | -_|\n|_____|___|_|_|_|___|\n\n┌ Info:\n│ Starting Genie in >> DEV << mode\n└\n[ Info: Logging to file at MyGenieApp/log/dev.log\n\n\n\n\n\n","category":"function"},{"location":"genie/#Genie.startup","page":"-","title":"Genie.startup","text":"startup(port::Int = Genie.config.server_port, host::String = Genie.config.server_host;\n    ws_port::Int = Genie.config.websocket_port, async::Bool = ! Genie.config.run_as_server) :: Nothing\n\nStarts the web server. Alias for AppServer.startup\n\nArguments\n\nport::Int: the port used by the web server\nhost::String: the host used by the web server\nws_port::Int: the port used by the Web Sockets server\nasync::Bool: run the web server task asynchronously\n\nExamples\n\njulia> startup(8000, \"0.0.0.0\", async = false)\n[ Info: Ready!\nWeb Server starting at http://0.0.0.0:8000\n\n\n\n\n\n","category":"function"},{"location":"genie/#Genie.newmodel","page":"-","title":"Genie.newmodel","text":"newmodel(model_name::String; context = @__MODULE__) :: Nothing\n\nCreates a new SearchLight model file.\n\n\n\n\n\n","category":"function"},{"location":"genie/#Genie.newcontroller","page":"-","title":"Genie.newcontroller","text":"newcontroller(controller_name::String) :: Nothing\n\nCreates a new controller file. If pluralize is false, the name of the controller is not automatically pluralized.\n\n\n\n\n\n","category":"function"},{"location":"genie/#Genie.newresource","page":"-","title":"Genie.newresource","text":"newresource(resource_name::String; pluralize::Bool = true, context::Module = @__MODULE__) :: Nothing\n\nCreates all the files associated with a new resource. If pluralize is false, the name of the resource is not automatically pluralized.\n\n\n\n\n\n","category":"function"},{"location":"genie/#Genie.newmigration","page":"-","title":"Genie.newmigration","text":"newmigration(migration_name::String, context::Module = @__MODULE__) :: Nothing\n\nCreates a new SearchLight migration file.\n\n\n\n\n\n","category":"function"},{"location":"genie/#Genie.newtablemigration","page":"-","title":"Genie.newtablemigration","text":"newtablemigration(migration_name::String) :: Nothing\n\nCreates a new migration prefilled with code for creating a new table.\n\n\n\n\n\n","category":"function"},{"location":"genie/#Genie.newtask","page":"-","title":"Genie.newtask","text":"newtask(task_name::String) :: Nothing\n\nCreates a new Genie Task file.\n\n\n\n\n\n","category":"function"},{"location":"router/#","page":"-","title":"-","text":"CurrentModule = Router","category":"page"},{"location":"router/#","page":"-","title":"-","text":"","category":"page"},{"location":"router/#","page":"-","title":"-","text":"show\nParams\nRoute\nChannel\nDict\nispayload\nroute\nchannel\nnamedroutes\nnamedchannels\nroutes\nchannels\ndelete!\nto_link!!\nlink_to!!\nto_link\nlink_to\ncontent_type\ncontent_length\nrequest_type_is\nrequest_type\n@params\n@request\nresponse_type\nis_static_file\nto_uri\nserve_static_file\npreflight_response\nerror_404\nerror_500\nfile_extension\nfile_headers","category":"page"},{"location":"router/#Base.show","page":"-","title":"Base.show","text":"show(x)\n\nWrite an informative text representation of a value to the current output stream. New types should overload show(io, x) where the first argument is a stream. The representation used by show generally includes Julia-specific formatting and type information.\n\n\n\n\n\nshow(io, mime, x)\n\nThe display functions ultimately call show in order to write an object x as a given mime type to a given I/O stream io (usually a memory buffer), if possible. In order to provide a rich multimedia representation of a user-defined type T, it is only necessary to define a new show method for T, via: show(io, ::MIME\"mime\", x::T) = ..., where mime is a MIME-type string and the function body calls write (or similar) to write that representation of x to io. (Note that the MIME\"\" notation only supports literal strings; to construct MIME types in a more flexible manner use MIME{Symbol(\"\")}.)\n\nFor example, if you define a MyImage type and know how to write it to a PNG file, you could define a function show(io, ::MIME\"image/png\", x::MyImage) = ... to allow your images to be displayed on any PNG-capable AbstractDisplay (such as IJulia). As usual, be sure to import Base.show in order to add new methods to the built-in Julia function show.\n\nThe default MIME type is MIME\"text/plain\". There is a fallback definition for text/plain output that calls show with 2 arguments. Therefore, this case should be handled by defining a 2-argument show(io::IO, x::MyType) method.\n\nTechnically, the MIME\"mime\" macro defines a singleton type for the given mime string, which allows us to exploit Julia's dispatch mechanisms in determining how to display objects of any given type.\n\nThe first argument to show can be an IOContext specifying output format properties. See IOContext for details.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.route","page":"-","title":"Genie.Router.route","text":"Named Genie routes constructors.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.channel","page":"-","title":"Genie.Router.channel","text":"Named Genie channels constructors.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.namedroutes","page":"-","title":"Genie.Router.namedroutes","text":"The list of the defined named routes.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.namedchannels","page":"-","title":"Genie.Router.namedchannels","text":"named_channels() :: Dict{Symbol,Any}\n\nThe list of the defined named channels.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.routes","page":"-","title":"Genie.Router.routes","text":"routes() :: Vector{Route}\n\nReturns a vector of defined routes.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.channels","page":"-","title":"Genie.Router.channels","text":"channels() :: Vector{Channel}\n\nReturns a vector of defined channels.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.delete!","page":"-","title":"Genie.Router.delete!","text":"delete!(routes, route_name::Symbol)\n\nRemoves the route with the corresponding name from the routes collection and returns the collection of remaining routes.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.to_link!!","page":"-","title":"Genie.Router.to_link!!","text":"Generates the HTTP link corresponding to route_name.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.link_to!!","page":"-","title":"Genie.Router.link_to!!","text":"Generates the HTTP link corresponding to route_name.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.content_type","page":"-","title":"Genie.Router.content_type","text":"\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.content_length","page":"-","title":"Genie.Router.content_length","text":"\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.request_type_is","page":"-","title":"Genie.Router.request_type_is","text":"\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.request_type","page":"-","title":"Genie.Router.request_type","text":"\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.@params","page":"-","title":"Genie.Router.@params","text":"\n\n\n\n","category":"macro"},{"location":"router/#Genie.Router.@request","page":"-","title":"Genie.Router.@request","text":"\n\n\n\n","category":"macro"},{"location":"router/#Genie.Router.response_type","page":"-","title":"Genie.Router.response_type","text":"response_type{T}(params::Dict{Symbol,T}) :: Symbol\nresponse_type(params::Params) :: Symbol\n\nReturns the content-type of the current request-response cycle.\n\n\n\n\n\nresponse_type{T}(check::Symbol, params::Dict{Symbol,T}) :: Bool\n\nChecks if the content-type of the current request-response cycle matches check.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.is_static_file","page":"-","title":"Genie.Router.is_static_file","text":"is_static_file(resource::String) :: Bool\n\nChecks if the requested resource is a static file.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.to_uri","page":"-","title":"Genie.Router.to_uri","text":"to_uri(resource::String) :: URI\n\nAttempts to convert resource to URI\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.serve_static_file","page":"-","title":"Genie.Router.serve_static_file","text":"serve_static_file(resource::String) :: Response\n\nReads the static file and returns the content as a Response.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.preflight_response","page":"-","title":"Genie.Router.preflight_response","text":"\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.error_404","page":"-","title":"Genie.Router.error_404","text":"\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.error_500","page":"-","title":"Genie.Router.error_500","text":"\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.file_extension","page":"-","title":"Genie.Router.file_extension","text":"file_extension(f) :: String\n\nReturns the file extesion of f.\n\n\n\n\n\n","category":"function"},{"location":"router/#Genie.Router.file_headers","page":"-","title":"Genie.Router.file_headers","text":"file_headers(f) :: Dict{String,String}\n\nReturns the file headers of f.\n\n\n\n\n\n","category":"function"},{"location":"logger/#","page":"-","title":"-","text":"CurrentModule = Logger","category":"page"},{"location":"logger/#","page":"-","title":"-","text":"","category":"page"},{"location":"logger/#","page":"-","title":"-","text":"log","category":"page"},{"location":"logger/#Base.log","page":"-","title":"Base.log","text":"log(b,x)\n\nCompute the base b logarithm of x. Throws DomainError for negative Real arguments.\n\nExamples\n\njulia> log(4,8)\n1.5\n\njulia> log(4,2)\n0.5\n\njulia> log(-2, 3)\nERROR: DomainError with -2.0:\nlog will only return a complex result if called with a complex argument. Try log(Complex(x)).\nStacktrace:\n [1] throw_complex_domainerror(::Symbol, ::Float64) at ./math.jl:31\n[...]\n\njulia> log(2, -3)\nERROR: DomainError with -3.0:\nlog will only return a complex result if called with a complex argument. Try log(Complex(x)).\nStacktrace:\n [1] throw_complex_domainerror(::Symbol, ::Float64) at ./math.jl:31\n[...]\n\nnote: Note\nIf b is a power of 2 or 10, log2 or log10 should be used, as these will typically be faster and more accurate. For example,julia> log(100,1000000)\n2.9999999999999996\n\njulia> log10(1000000)/2\n3.0\n\n\n\n\n\nlog(x)\n\nCompute the natural logarithm of x. Throws DomainError for negative Real arguments. Use complex negative arguments to obtain complex results.\n\nExamples\n\njulia> log(2)\n0.6931471805599453\n\njulia> log(-3)\nERROR: DomainError with -3.0:\nlog will only return a complex result if called with a complex argument. Try log(Complex(x)).\nStacktrace:\n [1] throw_complex_domainerror(::Symbol, ::Float64) at ./math.jl:31\n[...]\n\n\n\n\n\nlog(A{T}::StridedMatrix{T})\n\nIf A has no negative real eigenvalue, compute the principal matrix logarithm of A, i.e. the unique matrix X such that e^X = A and -pi  Im(lambda)  pi for all the eigenvalues lambda of X. If A has nonpositive eigenvalues, a nonprincipal matrix function is returned whenever possible.\n\nIf A is symmetric or Hermitian, its eigendecomposition (eigen) is used, if A is triangular an improved version of the inverse scaling and squaring method is employed (see [AH12] and [AHR13]). For general matrices, the complex Schur form (schur) is computed and the triangular algorithm is used on the triangular factor.\n\n[AH12]: Awad H. Al-Mohy and Nicholas J. Higham, \"Improved inverse  scaling and squaring algorithms for the matrix logarithm\", SIAM Journal on Scientific Computing, 34(4), 2012, C153-C169. doi:10.1137/110852553\n\n[AHR13]: Awad H. Al-Mohy, Nicholas J. Higham and Samuel D. Relton, \"Computing the Fréchet derivative of the matrix logarithm and estimating the condition number\", SIAM Journal on Scientific Computing, 35(4), 2013, C394-C410. doi:10.1137/120885991\n\nExamples\n\njulia> A = Matrix(2.7182818*I, 2, 2)\n2×2 Array{Float64,2}:\n 2.71828  0.0\n 0.0      2.71828\n\njulia> log(A)\n2×2 Array{Float64,2}:\n 1.0  0.0\n 0.0  1.0\n\n\n\n\n\nlog(message::Union{String,Symbol,Number,Exception}, level::Union{String,Symbol} = :debug; showst = false) :: Nothing\n\nLogs message to all registered logger, taking into account the log level.\n\n\n\n\n\n","category":"function"},{"location":"plugins/#","page":"-","title":"-","text":"CurrentModule = Plugins","category":"page"},{"location":"plugins/#","page":"-","title":"-","text":"","category":"page"},{"location":"plugins/#","page":"-","title":"-","text":"","category":"page"},{"location":"configuration/#","page":"-","title":"-","text":"CurrentModule = Configuration","category":"page"},{"location":"configuration/#","page":"-","title":"-","text":"","category":"page"},{"location":"configuration/#","page":"-","title":"-","text":"isdev\nisprod\nistest\n@ifdev\n@ifprod\n@iftest\nenv\ncache_enabled\nSettings","category":"page"},{"location":"configuration/#Genie.Configuration.isdev","page":"-","title":"Genie.Configuration.isdev","text":"isdev()  :: Bool\nisprod() :: Bool\nistest() :: Bool\n\nSet of utility functions that return whether or not the current environment is development, production or testing.\n\nExamples\n\njulia> Configuration.isdev()\ntrue\n\njulia> Configuration.isprod()\nfalse\n\n\n\n\n\n","category":"function"},{"location":"configuration/#Genie.Configuration.env","page":"-","title":"Genie.Configuration.env","text":"env() :: String\n\nReturns the current Genie environment.\n\nExamples\n\njulia> Configuration.env()\n\"dev\"\n\n\n\n\n\n","category":"function"},{"location":"configuration/#Genie.Configuration.cache_enabled","page":"-","title":"Genie.Configuration.cache_enabled","text":"cache_enabled() :: Bool\n\nIndicates whether or not the app has caching enabled (cache_duration > 0).\n\n\n\n\n\n","category":"function"},{"location":"configuration/#Genie.Configuration.Settings","page":"-","title":"Genie.Configuration.Settings","text":"mutable struct Settings\n\nApp configuration - sets up the app's defaults. Individual options are overwritten in the corresponding environment file.\n\nArguments\n\nserver_port::Int: the port for running the web server (default 8000)\nserver_host::String: the host for running the web server (default \"127.0.0.1\")\nserver_document_root::String: path to the document root (default \"public/\")\nserver_handle_static_files::Bool: if true, Genie will also serve static files. In production, it is recommended to serve static files with a web server like Nginx.\nserver_signature::String: Genie's signature used for tagging the HTTP responses. If empty, it will not be added.\napp_env::String: the environment in which the app is running (dev, test, or prod)\ncors_headers::Dict{String,String}: default Access-Control-* CORS settings\ncors_allowed_origins::Vector{String}: allowed origin hosts for CORS settings\ncache_adapter::Symbol: cache adapter backend (default File)\ncache_duraction::Int: cache expiration time in seconds\nlog_level::Symbol: logging severity level, one of :debug, :info, :warn, :error\nlog_formatted::Bool: if true, Genie will attempt to pretty print some of the logged values\nlog_cache::Bool: if true, caching info is logged\nlog_views::Bool: if true, information from the view layer (template building) is logged\nlog_to_file::Bool: if true, information will be logged to file besides REPL\nassets_fingerprinted::Bool: if true, asset fingerprinting is used in the asset pipeline\ntests_force_test_env::Bool: if true, when running tests, Genie will automatically switch the configuration to the test environment to avoid accidental coruption of dev or prod data\nsession_auto_start::Bool: if true, a session is automatically started for each request\nsession_key_name::String: the name of the session cookie\nsession_storage::Symbol: the backend adapter for session storage (default File)\ninflector_irregulars::Vector{Tuple{String,String}}: additional irregular singular-plural forms to be used by the Inflector\nflax_compile_templates::Bool: if true, the view templates are compiled and persisted between requests\nflax_autoregister_webcomponents::Bool: automatically register custom HTML tags\nrun_as_server::Bool: when true the server thread is launched synchronously to avoid that the script exits\nwebsocket_server::Bool: if true, the websocket server is also started together with the web server\nrenderer_default_layout_file::Symbol: default name for the layout file (:app)\n\n\n\n\n\n","category":"type"},{"location":"helpers/#","page":"-","title":"-","text":"CurrentModule = Helpers","category":"page"},{"location":"helpers/#","page":"-","title":"-","text":"","category":"page"},{"location":"helpers/#","page":"-","title":"-","text":"request\nresponse\nflash\nflash_has_message\nwsclient","category":"page"},{"location":"helpers/#Genie.Helpers.request","page":"-","title":"Genie.Helpers.request","text":"request() :: HTTP.Request\n\nReturns the Request object associated with the current HTTP request.\n\n\n\n\n\nrequest(params::Dict{Symbol,Any}) :: HTTP.Request\n\nReturns the Request object associated with the current HTTP request.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Genie.Helpers.response","page":"-","title":"Genie.Helpers.response","text":"response() :: HTTP.Response\n\nReturns the Response object associated with the current HTTP request.\n\n\n\n\n\nresponse(params::Dict{Symbol,Any}) :: HTTP.Response\n\nReturns the Response object associated with the current HTTP request.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Genie.Helpers.flash","page":"-","title":"Genie.Helpers.flash","text":"flash()\n\nReturns the flash dict object associated with the current HTTP request.\n\n\n\n\n\nflash(params::Dict{Symbol,Any})\n\nReturns the flash dict object associated with the current HTTP request.\n\n\n\n\n\nflash(value::Any) :: Nothing\n\nStores value on the flash.\n\n\n\n\n\nflash(value::Any, params::Dict{Symbol,Any}) :: Nothing\n\nStores value on the flash.\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Genie.Helpers.flash_has_message","page":"-","title":"Genie.Helpers.flash_has_message","text":"flash_has_message() :: Bool\n\nChecks if there's any value on the flash storage\n\n\n\n\n\n","category":"function"},{"location":"helpers/#Genie.Helpers.wsclient","page":"-","title":"Genie.Helpers.wsclient","text":"wsclient(params::Dict{Symbol,Any}) :: HTTP.WebSockets.WebSocket\n\nReturns the WebSocket object associated with the current WS request.\n\n\n\n\n\n","category":"function"},{"location":"toolbox/#","page":"-","title":"-","text":"CurrentModule = Toolbox","category":"page"},{"location":"toolbox/#","page":"-","title":"-","text":"","category":"page"},{"location":"toolbox/#","page":"-","title":"-","text":"TaskInfo\nTaskResult\ntasks\nloadtasks\nprinttasks\nnew","category":"page"},{"location":"toolbox/#Genie.Toolbox.tasks","page":"-","title":"Genie.Toolbox.tasks","text":"tasks(; filter_type_name = Symbol()) :: Vector{TaskInfo}\n\nReturns a vector of all registered Genie tasks.\n\n\n\n\n\n","category":"function"},{"location":"toolbox/#Genie.Toolbox.loadtasks","page":"-","title":"Genie.Toolbox.loadtasks","text":"tasks(; filter_type_name = Symbol()) :: Vector{TaskInfo}\n\nReturns a vector of all registered Genie tasks.\n\n\n\n\n\n","category":"function"},{"location":"toolbox/#Genie.Toolbox.printtasks","page":"-","title":"Genie.Toolbox.printtasks","text":"Prints a list of all the registered Genie tasks to the standard output.\n\n\n\n\n\n","category":"function"},{"location":"toolbox/#new","page":"-","title":"new","text":"new\n\nSpecial function available to inner constructors which created a new object of the type. See the manual section on Inner Constructor Methods for more information.\n\n\n\n\n\n","category":"keyword"},{"location":"util/#","page":"-","title":"-","text":"CurrentModule = Util","category":"page"},{"location":"util/#","page":"-","title":"-","text":"","category":"page"},{"location":"util/#","page":"-","title":"-","text":"expand_nullable\nfile_name_without_extension\nwalk_dir","category":"page"},{"location":"util/#Genie.Util.expand_nullable","page":"-","title":"Genie.Util.expand_nullable","text":"expand_nullable{T}(value::Nullable{T}, default::T) :: T\n\nReturns value if it is not null - otherwise default.\n\n\n\n\n\n","category":"function"},{"location":"util/#Genie.Util.file_name_without_extension","page":"-","title":"Genie.Util.file_name_without_extension","text":"file_name_without_extension(file_name, extension = \".jl\") :: String\n\nRemoves the file extension extension from file_name.\n\n\n\n\n\n","category":"function"},{"location":"util/#Genie.Util.walk_dir","page":"-","title":"Genie.Util.walk_dir","text":"function walk_dir(dir, paths = String[]; only_extensions = [\"jl\"], only_files = true, only_dirs = false) :: Vector{String}\n\nRecursively walks dir and produces non directories. If only_files, directories will be skipped. If only_dirs, files will be skipped.\n\n\n\n\n\n","category":"function"},{"location":"encryption/#","page":"-","title":"-","text":"CurrentModule = Encryption","category":"page"},{"location":"encryption/#","page":"-","title":"-","text":"","category":"page"},{"location":"encryption/#","page":"-","title":"-","text":"encrypt\ndecrypt","category":"page"},{"location":"encryption/#Genie.Encryption.encrypt","page":"-","title":"Genie.Encryption.encrypt","text":"encrypt{T}(s::T) :: String\n\nEncrypts s.\n\n\n\n\n\n","category":"function"},{"location":"encryption/#Genie.Encryption.decrypt","page":"-","title":"Genie.Encryption.decrypt","text":"decrypt(s::String) :: String\n\nDecrypts s (a string previously encrypted by Genie).\n\n\n\n\n\n","category":"function"},{"location":"cookies/#","page":"-","title":"-","text":"CurrentModule = Cookies","category":"page"},{"location":"cookies/#","page":"-","title":"-","text":"","category":"page"},{"location":"cookies/#","page":"-","title":"-","text":"get\nget!!\nset!\nDict\nnullablevalue\ngetcookies","category":"page"},{"location":"cookies/#Genie.Cookies.get","page":"-","title":"Genie.Cookies.get","text":"get(payload::Union{HTTP.Response,HTTP.Request}, key::Union{String,Symbol}, default::T; encrypted::Bool = true)::T where T\n\nAttempts to get the Cookie value stored at key within payload. If the key is not set, the default value is returned.\n\nArguments\n\npayload::Union{HTTP.Response,HTTP.Request}: the request or response object containing the Cookie headers\nkey::Union{String,Symbol}: the name of the cookie value\ndefault::T: default value to be returned if no cookie value is set at key\nencrypted::Bool: if true the value stored on the cookie is automatically decrypted\n\n\n\n\n\nget(res::HTTP.Response, key::Union{String,Symbol}) :: Nullable{String}\n\nRetrieves a value stored on the cookie as key from the Respose object.\n\nArguments\n\npayload::Union{HTTP.Response,HTTP.Request}: the request or response object containing the Cookie headers\nkey::Union{String,Symbol}: the name of the cookie value\nencrypted::Bool: if true the value stored on the cookie is automatically decrypted\n\n\n\n\n\nget(req::Request, key::Union{String,Symbol}) :: Nullable{String}\n\nRetrieves a value stored on the cookie as key from the Request object.\n\nArguments\n\nreq::HTTP.Request: the request or response object containing the Cookie headers\nkey::Union{String,Symbol}: the name of the cookie value\nencrypted::Bool: if true the value stored on the cookie is automatically decrypted\n\n\n\n\n\n","category":"function"},{"location":"cookies/#Genie.Cookies.get!!","page":"-","title":"Genie.Cookies.get!!","text":"get!!(payload::Union{HTTP.Response,HTTP.Request}, key::Union{String,Symbol}; encrypted::Bool = true) :: String\n\nRetrieves the cookie value stored at key within the payload object. Throws error if the key is not set.\n\nArguments\n\npayload::Union{HTTP.Response,HTTP.Request}: the request or response object containing the Cookie headers\nkey::Union{String,Symbol}: the name of the cookie value\nencrypted::Bool: if true the value stored on the cookie is automatically decrypted\n\n\n\n\n\n","category":"function"},{"location":"cookies/#Genie.Cookies.set!","page":"-","title":"Genie.Cookies.set!","text":"set!(res::HTTP.Response, key::Union{String,Symbol}, value::Any, attributes::Dict; encrypted::Bool = true) :: HTTP.Response\n\nSets value under the key label on the Cookie.\n\nArguments\n\nres::HTTP.Response: the HTTP.Response object\nkey::Union{String,Symbol}: the key for storing the cookie value\nvalue::Any: the cookie value\nattributes::Dict: additional cookie attributes, such as Path or HttpOnly\nencrypted::Bool: if true the value is stored encoded\n\n\n\n\n\n","category":"function"},{"location":"cookies/#Base.Dict","page":"-","title":"Base.Dict","text":"Dict([itr])\n\nDict{K,V}() constructs a hash table with keys of type K and values of type V. Keys are compared with isequal and hashed with hash.\n\nGiven a single iterable argument, constructs a Dict whose key-value pairs are taken from 2-tuples (key,value) generated by the argument.\n\nExamples\n\njulia> Dict([(\"A\", 1), (\"B\", 2)])\nDict{String,Int64} with 2 entries:\n  \"B\" => 2\n  \"A\" => 1\n\nAlternatively, a sequence of pair arguments may be passed.\n\njulia> Dict(\"A\"=>1, \"B\"=>2)\nDict{String,Int64} with 2 entries:\n  \"B\" => 2\n  \"A\" => 1\n\n\n\n\n\n","category":"type"},{"location":"cookies/#Genie.Cookies.nullablevalue","page":"-","title":"Genie.Cookies.nullablevalue","text":"nullablevalue(payload::Union{HTTP.Response,HTTP.Request}, key::Union{String,Symbol}; encrypted::Bool = true)\n\nAttempts to retrieve a cookie value stored at key in the payload object and returns a Nullable{String}\n\nArguments\n\npayload::Union{HTTP.Response,HTTP.Request}: the request or response object containing the Cookie headers\nkey::Union{String,Symbol}: the name of the cookie value\nencrypted::Bool: if true the value stored on the cookie is automatically decrypted\n\n\n\n\n\n","category":"function"},{"location":"cookies/#Genie.Cookies.getcookies","page":"-","title":"Genie.Cookies.getcookies","text":"getcookies(req::HTTP.Request) :: Vector{HTTP.Cookies.Cookie}\n\nExtracts cookies from within req\n\n\n\n\n\ngetcookies(req::HTTP.Request) :: Vector{HTTP.Cookies.Cookie}\n\nExtracts cookies from within req, filtering them by matching name.\n\n\n\n\n\n","category":"function"},{"location":"appserver/#","page":"-","title":"-","text":"CurrentModule = AppServer","category":"page"},{"location":"appserver/#","page":"-","title":"-","text":"","category":"page"},{"location":"appserver/#","page":"-","title":"-","text":"startup","category":"page"},{"location":"appserver/#Genie.AppServer.startup","page":"-","title":"Genie.AppServer.startup","text":"startup(port::Int = Genie.config.server_port, host::String = Genie.config.server_host;\n    ws_port::Int = Genie.config.websocket_port, async::Bool = ! Genie.config.run_as_server) :: Nothing\n\nStarts the web server.\n\nArguments\n\nport::Int: the port used by the web server\nhost::String: the host used by the web server\nws_port::Int: the port used by the Web Sockets server\nasync::Bool: run the web server task asynchronously\n\nExamples\n\njulia> startup(8000, \"0.0.0.0\", async = false)\n[ Info: Ready!\nWeb Server starting at http://0.0.0.0:8000\n\n\n\n\n\n","category":"function"},{"location":"repl/#","page":"-","title":"-","text":"CurrentModule = REPL","category":"page"},{"location":"repl/#","page":"-","title":"-","text":"","category":"page"},{"location":"repl/#","page":"-","title":"-","text":"secret_token\ncopy_fullstack_app\ncopy_microstack_app\ncopy_db_support\ncopy_mvc_support\nwrite_secrets_file\nwrite_app_custom_files\ninstall_app_dependencies\nautostart_app\nnewapp\nloadapp\nsetup_windows_bin_files\nsetup_nix_bin_files","category":"page"},{"location":"repl/#Genie.REPL.secret_token","page":"-","title":"Genie.REPL.secret_token","text":"secret_token() :: String\n\nGenerates a random secret token to be used for configuring the SECRET_TOKEN const.\n\n\n\n\n\n","category":"function"},{"location":"repl/#Genie.REPL.copy_fullstack_app","page":"-","title":"Genie.REPL.copy_fullstack_app","text":"\n\n\n\n","category":"function"},{"location":"repl/#Genie.REPL.copy_microstack_app","page":"-","title":"Genie.REPL.copy_microstack_app","text":"\n\n\n\n","category":"function"},{"location":"repl/#Genie.REPL.copy_db_support","page":"-","title":"Genie.REPL.copy_db_support","text":"\n\n\n\n","category":"function"},{"location":"repl/#Genie.REPL.copy_mvc_support","page":"-","title":"Genie.REPL.copy_mvc_support","text":"\n\n\n\n","category":"function"},{"location":"repl/#Genie.REPL.write_secrets_file","page":"-","title":"Genie.REPL.write_secrets_file","text":"Generates a valid secrets.jl file with a random SECRET_TOKEN.\n\n\n\n\n\n","category":"function"},{"location":"repl/#Genie.REPL.write_app_custom_files","page":"-","title":"Genie.REPL.write_app_custom_files","text":"\n\n\n\n","category":"function"},{"location":"repl/#Genie.REPL.install_app_dependencies","page":"-","title":"Genie.REPL.install_app_dependencies","text":"\n\n\n\n","category":"function"},{"location":"repl/#Genie.REPL.autostart_app","page":"-","title":"Genie.REPL.autostart_app","text":"\n\n\n\n","category":"function"},{"location":"repl/#Genie.REPL.newapp","page":"-","title":"Genie.REPL.newapp","text":"newapp(path::String = \".\"; autostart::Bool = true, fullstack::Bool = false, dbsupport::Bool = false, mvcsupport::Bool = false) :: Nothing\n\nScaffolds a new Genie app, setting up the file structure indicated by the various arguments.\n\nArguments\n\npath::String: the name of the app and the path where to bootstrap it\nautostart::Bool: automatically start the app once the file structure is created\nfullstack::Bool: the type of app to be bootstrapped. The fullstack app includes MVC structure, DB connection code, and asset pipeline files.\ndbsupport::Bool: bootstrap the files needed for DB connection setup via the SearchLight ORM\nmvcsupport::Bool: adds the files used for Flax view templates rendering and working with resources\n\nExamples\n\njulia> Genie.newapp(\"MyGenieApp\")\n2019-08-06 16:54:15:INFO:Main: Done! New app created at MyGenieApp\n2019-08-06 16:54:15:DEBUG:Main: Changing active directory to MyGenieApp\n2019-08-06 16:54:15:DEBUG:Main: Installing app dependencies\n Resolving package versions...\n  Updating `~/Dropbox/Projects/GenieTests/MyGenieApp/Project.toml`\n  [c43c736e] + Genie v0.10.1\n  Updating `~/Dropbox/Projects/GenieTests/MyGenieApp/Manifest.toml`\n\n2019-08-06 16:54:27:INFO:Main: Starting your brand new Genie app - hang tight!\n _____         _\n|   __|___ ___|_|___\n|  |  | -_|   | | -_|\n|_____|___|_|_|_|___|\n\n┌ Info:\n│ Starting Genie in >> DEV << mode\n└\n[ Info: Logging to file at MyGenieApp/log/dev.log\n[ Info: Ready!\n2019-08-06 16:54:32:DEBUG:Main: Web Server starting at http://127.0.0.1:8000\n2019-08-06 16:54:32:DEBUG:Main: Web Server running at http://127.0.0.1:8000\n\n\n\n\n\n","category":"function"},{"location":"repl/#Genie.REPL.loadapp","page":"-","title":"Genie.REPL.loadapp","text":"loadapp(path::String = \".\"; autostart::Bool = false) :: Nothing\n\nLoads an existing Genie app from the file system, within the current Julia REPL session.\n\nArguments\n\npath::String: the path to the Genie app on the file system.\nautostart::Bool: automatically start the app upon loading it.\n\nExamples\n\nshell> tree -L 1\n.\n├── Manifest.toml\n├── Project.toml\n├── bin\n├── bootstrap.jl\n├── config\n├── env.jl\n├── genie.jl\n├── log\n├── public\n├── routes.jl\n└── src\n\n5 directories, 6 files\n\njulia> using Genie\n\njulia> Genie.loadapp(\".\")\n _____         _\n|   __|___ ___|_|___\n|  |  | -_|   | | -_|\n|_____|___|_|_|_|___|\n\n┌ Info:\n│ Starting Genie in >> DEV << mode\n└\n[ Info: Logging to file at MyGenieApp/log/dev.log\n\n\n\n\n\n","category":"function"},{"location":"repl/#Genie.REPL.setup_windows_bin_files","page":"-","title":"Genie.REPL.setup_windows_bin_files","text":"\n\n\n\n","category":"function"},{"location":"#","page":"Genie","title":"Genie","text":"(Image: Genie Logo)","category":"page"},{"location":"#","page":"Genie","title":"Genie","text":"(Image: Stable) (Image: Latest)","category":"page"},{"location":"#Genie-1","page":"Genie","title":"Genie","text":"","category":"section"},{"location":"#The-highly-productive-Julia-web-framework-1","page":"Genie","title":"The highly productive Julia web framework","text":"","category":"section"},{"location":"#","page":"Genie","title":"Genie","text":"Genie is a full-stack MVC web framework that provides a streamlined and efficient workflow for developing modern web applications. It builds on Julia's strengths (high-level, high-performance, dynamic, JIT compiled), exposing a rich API and a powerful toolset for productive web development.","category":"page"},{"location":"#Current-status-1","page":"Genie","title":"Current status","text":"","category":"section"},{"location":"#","page":"Genie","title":"Genie","text":"Genie is compatible with Julia v1.0 and up.","category":"page"},{"location":"#","page":"Genie","title":"Genie","text":"","category":"page"},{"location":"#Documentation-1","page":"Genie","title":"Documentation","text":"","category":"section"},{"location":"#","page":"Genie","title":"Genie","text":"https://genieframework.github.io/Genie.jl/","category":"page"},{"location":"#","page":"Genie","title":"Genie","text":"","category":"page"},{"location":"#Acknowledgements-1","page":"Genie","title":"Acknowledgements","text":"","category":"section"},{"location":"#","page":"Genie","title":"Genie","text":"Genie uses a multitude of packages that have been kindly contributed by the Julia community.\nThe awesome Genie logo was designed by Alvaro Casanova (www.yeahstyledg.com).","category":"page"}]
}
